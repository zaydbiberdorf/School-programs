# Code need for the doubly-linked-list implementation used in Assignment 3
# The code is identical to that in the course notes, with several methods added.
#
# NOTE: that the insert routine needs to be implemented.

class DLinkedListNode:
	def __init__(self, initData, initNext, initPrevious):
		self.data = initData
		self.next = initNext
		self.previous = initPrevious

		if (initPrevious != None):
			initPrevious.next = self
		if (initNext != None):
			initNext.previous = self

	def __str__(self):
		return "%s" % (self.data)

	def getData(self):
		return self.data

	def getNext(self):
		return self.next

	def getPrevious(self):
		return self.previous

	def setData(self, newData):
		self.data = newData

	def setNext(self, newNext):
		self.next = newNext

	def setPrevious(self, newPrevious):
		self.previous= newPrevious

class DLinkedList:
	def __init__(self):
		self.head = None
		self.tail = None
		self.size = 0

	def __str__(self):
		s = "[ "
		current = self.head;
		while current != None:
			s += "%s " % (current)
			current = current.getNext()
		s += "]"
		return s

	def isEmpty(self):
		return self.size == 0

	def length(self):
		return self.size

	def getHead(self):
		return self.head

	def getTail(self):
		return self.tail

	def search(self, item):
		current = self.head
		found = False
		while current != None and not found:
			if current.getData() == item:
				found = True
			else:
				current = current.getNext()
		return found

	def index(self, item):
		current = self.head
		found = False
		index = 0
		while current != None and not found:
			if current.getData() == item:
				found = True
			else:
				current = current.getNext()
				index = index + 1
		if not found:
			index = -1
		return index

	def add(self, item):
		temp = DLinkedListNode(item, self.head, None)
		if self.head != None:
			self.head.setPrevious(temp)
		else:
			self.tail = temp
		self.head = temp
		self.size += 1

	def append(self, item):
		temp = DLinkedListNode(item, None, None)
		if (self.head == None):
			self.head = temp
		else:
			self.tail.setNext(temp)
			temp.setPrevious(self.tail)
		self.tail = temp
		self.size +=1

	def remove(self, item):
		current = self.head
		previous = None
		found = False
		while not found:
			if current.getData() == item:
				found = True
			else:
				previous = current
				current = current.getNext()
		if previous == None:
			self.head = current.getNext()
		else:
			previous.setNext(current.getNext())
		if (current.getNext() != None):
			current.getNext().setPrevious(previous)
		else:
			self.tail = previous
		self.size -= 1

	def removeitem(self, current):
		previous = current.getPrevious()
		if previous == None:
			self.head = current.getNext()
		else:
			previous.setNext(current.getNext())
		if (current.getNext() != None):
			current.getNext().setPrevious(previous)
		else:
			self.tail=previous
		if previous:
			self.curr = previous.getNext()
		else:
			self.curr = None
		self.size -= 1

	def insert(self, current, item, where):
		# You write this code
		# NOTE: there is an extra parameter here
		# Where = 0 (before current)
		# Where = 1 (after current)
		print("Please implement me!")
